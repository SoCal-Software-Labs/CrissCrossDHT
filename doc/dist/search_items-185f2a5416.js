searchNodes=[{"doc":"CrissCrossDHT is an Elixir package that provides a Kademlia Distributed Hash Table (DHT) implementation according to BitTorrent Enhancement Proposals (BEP) 05 . This specific implementation is called &quot;mainline&quot; variant.","ref":"CrissCrossDHT.html","title":"CrissCrossDHT","type":"module"},{"doc":"","ref":"CrissCrossDHT.html#cluster_announce/3","title":"CrissCrossDHT.cluster_announce/3","type":"function"},{"doc":"","ref":"CrissCrossDHT.html#find_name/4","title":"CrissCrossDHT.find_name/4","type":"function"},{"doc":"","ref":"CrissCrossDHT.html#find_name_sync/4","title":"CrissCrossDHT.find_name_sync/4","type":"function"},{"doc":"","ref":"CrissCrossDHT.html#find_value/3","title":"CrissCrossDHT.find_value/3","type":"function"},{"doc":"","ref":"CrissCrossDHT.html#find_value_sync/3","title":"CrissCrossDHT.find_value_sync/3","type":"function"},{"doc":"","ref":"CrissCrossDHT.html#has_announced/2","title":"CrissCrossDHT.has_announced/2","type":"function"},{"doc":"This function returns the generated node_id as a bitstring.","ref":"CrissCrossDHT.html#node_id/0","title":"CrissCrossDHT.node_id/0","type":"function"},{"doc":"This function returns the generated node_id encoded as a String (40 characters).","ref":"CrissCrossDHT.html#node_id_enc/0","title":"CrissCrossDHT.node_id_enc/0","type":"function"},{"doc":"","ref":"CrissCrossDHT.html#ref/0","title":"CrissCrossDHT.ref/0","type":"function"},{"doc":"This function needs an infohash as binary and a callback function as parameter. This function uses its own routing table as a starting point to start a get_peers search for the given infohash. Example iex&gt; &quot;3F19B149F53A50E14FC0B79926A391896EABAB6F&quot; |&gt; Base . decode16! |&gt; CrissCrossDHT . search ( fn ( node ) -&gt; { ip , port } = node IO . puts &quot;ip: \#{ inspect ip } port: \#{ port } &quot; end )","ref":"CrissCrossDHT.html#search/3","title":"CrissCrossDHT.search/3","type":"function"},{"doc":"This function needs an infohash as binary and callback function as parameter. This function does the same thing as the search/2 function, except it sends an announce message to the found peers. This function does not need a TCP port which means the announce message sets :implied_port to true. Example iex&gt; &quot;3F19B149F53A50E14FC0B79926A391896EABAB6F&quot; |&gt; Base . decode16! |&gt; CrissCrossDHT . search_announce ( fn ( node ) -&gt; { ip , port } = node IO . puts &quot;ip: \#{ inspect ip } port: \#{ port } &quot; end )","ref":"CrissCrossDHT.html#search_announce/4","title":"CrissCrossDHT.search_announce/4","type":"function"},{"doc":"This function needs an infohash as binary, a callback function as parameter, and a TCP port as integer. This function does the same thing as the search/2 function, except it sends an announce message to the found peers. Example iex&gt; &quot;3F19B149F53A50E14FC0B79926A391896EABAB6F&quot; ## Ubuntu 15.04 |&gt; Base . decode16! |&gt; CrissCrossDHT . search_announce ( fn ( node ) -&gt; { ip , port } = node IO . puts &quot;ip: \#{ inspect ip } port: \#{ port } &quot; end , 6881 )","ref":"CrissCrossDHT.html#search_announce/5","title":"CrissCrossDHT.search_announce/5","type":"function"},{"doc":"","ref":"CrissCrossDHT.html#store/3","title":"CrissCrossDHT.store/3","type":"function"},{"doc":"","ref":"CrissCrossDHT.html#store/4","title":"CrissCrossDHT.store/4","type":"function"},{"doc":"","ref":"CrissCrossDHT.html#store_name/6","title":"CrissCrossDHT.store_name/6","type":"function"},{"doc":"","ref":"CrissCrossDHT.html#store_name/7","title":"CrissCrossDHT.store_name/7","type":"function"},{"doc":"A binary which contains the cluster","ref":"CrissCrossDHT.html#t:cluster/0","title":"CrissCrossDHT.cluster/0","type":"type"},{"doc":"A binary which contains the infohash of a torrent. An infohash is a SHA1 encoded hex sum which identifies a torrent.","ref":"CrissCrossDHT.html#t:infohash/0","title":"CrissCrossDHT.infohash/0","type":"type"},{"doc":"TODO","ref":"CrissCrossDHT.html#t:node_id/0","title":"CrissCrossDHT.node_id/0","type":"type"},{"doc":"TODO","ref":"CrissCrossDHT.html#t:node_id_enc/0","title":"CrissCrossDHT.node_id_enc/0","type":"type"},{"doc":"A non negative integer (0--65565) which represents a TCP port number.","ref":"CrissCrossDHT.html#t:tcp_port/0","title":"CrissCrossDHT.tcp_port/0","type":"type"},{"doc":"","ref":"CrissCrossDHT.html#t:ttl/0","title":"CrissCrossDHT.ttl/0","type":"type"},{"doc":"This module just capsules functions that avoid boilerplate when using the CrissCrossDHT Registry. (They are not callbacks)","ref":"CrissCrossDHT.Registry.html","title":"CrissCrossDHT.Registry","type":"module"},{"doc":"","ref":"CrissCrossDHT.Registry.html#get_pid/1","title":"CrissCrossDHT.Registry.get_pid/1","type":"function"},{"doc":"","ref":"CrissCrossDHT.Registry.html#get_pid/2","title":"CrissCrossDHT.Registry.get_pid/2","type":"function"},{"doc":"","ref":"CrissCrossDHT.Registry.html#get_pid/3","title":"CrissCrossDHT.Registry.get_pid/3","type":"function"},{"doc":"","ref":"CrissCrossDHT.Registry.html#get_pids/1","title":"CrissCrossDHT.Registry.get_pids/1","type":"function"},{"doc":"","ref":"CrissCrossDHT.Registry.html#get_pids/2","title":"CrissCrossDHT.Registry.get_pids/2","type":"function"},{"doc":"","ref":"CrissCrossDHT.Registry.html#get_pids/3","title":"CrissCrossDHT.Registry.get_pids/3","type":"function"},{"doc":"","ref":"CrissCrossDHT.Registry.html#id/2","title":"CrissCrossDHT.Registry.id/2","type":"function"},{"doc":"","ref":"CrissCrossDHT.Registry.html#id/3","title":"CrissCrossDHT.Registry.id/3","type":"function"},{"doc":"","ref":"CrissCrossDHT.Registry.html#lookup/1","title":"CrissCrossDHT.Registry.lookup/1","type":"function"},{"doc":"","ref":"CrissCrossDHT.Registry.html#register/1","title":"CrissCrossDHT.Registry.register/1","type":"function"},{"doc":"","ref":"CrissCrossDHT.Registry.html#start/0","title":"CrissCrossDHT.Registry.start/0","type":"function"},{"doc":"","ref":"CrissCrossDHT.Registry.html#unregister/1","title":"CrissCrossDHT.Registry.unregister/1","type":"function"},{"doc":"","ref":"CrissCrossDHT.Registry.html#via/1","title":"CrissCrossDHT.Registry.via/1","type":"function"},{"doc":"","ref":"CrissCrossDHT.Registry.html#via/2","title":"CrissCrossDHT.Registry.via/2","type":"function"},{"doc":"","ref":"CrissCrossDHT.Registry.html#via/3","title":"CrissCrossDHT.Registry.via/3","type":"function"},{"doc":"TODO","ref":"CrissCrossDHT.RoutingTable.Supervisor.html","title":"CrissCrossDHT.RoutingTable.Supervisor","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"CrissCrossDHT.RoutingTable.Supervisor.html#child_spec/1","title":"CrissCrossDHT.RoutingTable.Supervisor.child_spec/1","type":"function"},{"doc":"","ref":"CrissCrossDHT.RoutingTable.Supervisor.html#start_link/1","title":"CrissCrossDHT.RoutingTable.Supervisor.start_link/1","type":"function"},{"doc":"","ref":"CrissCrossDHT.Search.Supervisor.html","title":"CrissCrossDHT.Search.Supervisor","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"CrissCrossDHT.Search.Supervisor.html#child_spec/1","title":"CrissCrossDHT.Search.Supervisor.child_spec/1","type":"function"},{"doc":"Callback implementation for DynamicSupervisor.init/1 .","ref":"CrissCrossDHT.Search.Supervisor.html#init/1","title":"CrissCrossDHT.Search.Supervisor.init/1","type":"function"},{"doc":"","ref":"CrissCrossDHT.Search.Supervisor.html#start_child/6","title":"CrissCrossDHT.Search.Supervisor.start_child/6","type":"function"},{"doc":"","ref":"CrissCrossDHT.Search.Supervisor.html#start_link/1","title":"CrissCrossDHT.Search.Supervisor.start_link/1","type":"function"},{"doc":"","ref":"CrissCrossDHT.SearchName.Supervisor.html","title":"CrissCrossDHT.SearchName.Supervisor","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"CrissCrossDHT.SearchName.Supervisor.html#child_spec/1","title":"CrissCrossDHT.SearchName.Supervisor.child_spec/1","type":"function"},{"doc":"Callback implementation for DynamicSupervisor.init/1 .","ref":"CrissCrossDHT.SearchName.Supervisor.html#init/1","title":"CrissCrossDHT.SearchName.Supervisor.init/1","type":"function"},{"doc":"","ref":"CrissCrossDHT.SearchName.Supervisor.html#start_child/6","title":"CrissCrossDHT.SearchName.Supervisor.start_child/6","type":"function"},{"doc":"","ref":"CrissCrossDHT.SearchName.Supervisor.html#start_link/1","title":"CrissCrossDHT.SearchName.Supervisor.start_link/1","type":"function"},{"doc":"","ref":"CrissCrossDHT.SearchValue.Supervisor.html","title":"CrissCrossDHT.SearchValue.Supervisor","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"CrissCrossDHT.SearchValue.Supervisor.html#child_spec/1","title":"CrissCrossDHT.SearchValue.Supervisor.child_spec/1","type":"function"},{"doc":"Callback implementation for DynamicSupervisor.init/1 .","ref":"CrissCrossDHT.SearchValue.Supervisor.html#init/1","title":"CrissCrossDHT.SearchValue.Supervisor.init/1","type":"function"},{"doc":"","ref":"CrissCrossDHT.SearchValue.Supervisor.html#start_child/6","title":"CrissCrossDHT.SearchValue.Supervisor.start_child/6","type":"function"},{"doc":"","ref":"CrissCrossDHT.SearchValue.Supervisor.html#start_link/1","title":"CrissCrossDHT.SearchValue.Supervisor.start_link/1","type":"function"},{"doc":"","ref":"CrissCrossDHT.Server.DHTSled.TTLCleanup.html","title":"CrissCrossDHT.Server.DHTSled.TTLCleanup","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"CrissCrossDHT.Server.DHTSled.TTLCleanup.html#child_spec/1","title":"CrissCrossDHT.Server.DHTSled.TTLCleanup.child_spec/1","type":"function"},{"doc":"Callback implementation for GenServer.init/1 .","ref":"CrissCrossDHT.Server.DHTSled.TTLCleanup.html#init/1","title":"CrissCrossDHT.Server.DHTSled.TTLCleanup.init/1","type":"function"},{"doc":"","ref":"CrissCrossDHT.Server.DHTSled.TTLCleanup.html#scan/2","title":"CrissCrossDHT.Server.DHTSled.TTLCleanup.scan/2","type":"function"},{"doc":"","ref":"CrissCrossDHT.Server.DHTSled.TTLCleanup.html#start_link/1","title":"CrissCrossDHT.Server.DHTSled.TTLCleanup.start_link/1","type":"function"},{"doc":"Root Supervisor for CrissCrossDHT","ref":"CrissCrossDHT.Supervisor.html","title":"CrissCrossDHT.Supervisor","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"CrissCrossDHT.Supervisor.html#child_spec/1","title":"CrissCrossDHT.Supervisor.child_spec/1","type":"function"},{"doc":"","ref":"CrissCrossDHT.Supervisor.html#children/1","title":"CrissCrossDHT.Supervisor.children/1","type":"function"},{"doc":"","ref":"KRPCProtocol.html","title":"KRPCProtocol","type":"module"},{"doc":"See KRPCProtocol.Decoder.decode/1 .","ref":"KRPCProtocol.html#decode/1","title":"KRPCProtocol.decode/1","type":"function"},{"doc":"See KRPCProtocol.Encoder.encode/2 .","ref":"KRPCProtocol.html#encode/2","title":"KRPCProtocol.encode/2","type":"function"},{"doc":"See KRPCProtocol.Encoder.gen_tid/0 .","ref":"KRPCProtocol.html#gen_tid/0","title":"KRPCProtocol.gen_tid/0","type":"function"},{"doc":"KRPCProtocol.Encoder provides functions to decode mainline DHT messages.","ref":"KRPCProtocol.Decoder.html","title":"KRPCProtocol.Decoder","type":"module"},{"doc":"","ref":"KRPCProtocol.Decoder.html#comp_form/1","title":"KRPCProtocol.Decoder.comp_form/1","type":"function"},{"doc":"","ref":"KRPCProtocol.Decoder.html#decode/1","title":"KRPCProtocol.Decoder.decode/1","type":"function"},{"doc":"KRPCProtocol.Encoder provides functions to encode mainline DHT messages.","ref":"KRPCProtocol.Encoder.html","title":"KRPCProtocol.Encoder","type":"module"},{"doc":"This function returns a bencoded Mainline DHT message. error When the first argument is :error , the function encodes an error message. Example iex&gt; KRPCProtocol . encode ( :error , code : 202 , msg : &quot;Server Error&quot; , tid : &quot;aa&quot; ) &quot;d1:eli202e12:Server Errore1:t2:aa1:y1:ee&quot; ping The purpose of a ping query is check if another node is available. When the first argument is :ping , the function encodes a ping message. The function needs the node_id and a t_id . Example iex&gt; KRPCProtocol . encode ( :ping , tid : &quot;aa&quot; , node_id : &quot;bb&quot; ) &quot;d1:ad2:id2:bbe1:q4:ping1:t2:aa1:y1:qe&quot; find_node query A find_node query is used to find more nodes for a given target. When the first argument is :find_node , the function encodes a find_node message. The following arguments are required: transaction id, node id and a target. The 'want' argument is optional and can be set to &quot;n6&quot; if you are only intrested in nodes that can provide an IPv6 address. Examples iex&gt; KRPCProtocol . encode ( :find_node , tid : &quot;aa&quot; , node_id : &quot;bb&quot; , target : &quot;cc&quot; ) &quot;d1:ad2:id2:bb6:target2:cc4:want2:n4e1:q9:find_node1:t2:aa1:y1:qe&quot; iex&gt; KRPCProtocol . encode ( :find_node , tid : &quot;aa&quot; , node_id : &quot;bb&quot; , target : &quot;cc&quot; , want : &quot;n6&quot; ) &quot;d1:ad2:id2:bb6:target2:cc4:want2:n6e1:q9:find_node1:t2:aa1:y1:qe&quot; get_peers query A get_peers query is used to find nodes associated with a info_hash. When the first argument is :get_peers , the function encodes a get_peers message. The required arguments are node_id and info_hash. The optional arguments are scrape , noseed , and want . Please take a look at BEP0005 and BEP0033 for more information about these arguments. Examples iex&gt; KRPCProtocol . encode ( :get_peers , node_id : &quot;aa&quot; , info_hash : &quot;bb&quot; , tid : &quot;cc&quot; ) &quot;d1:ad2:id2:aa9:info_hash2:bbe1:q9:get_peers1:t2:cc1:y1:qe&quot; iex&gt; KRPCProtocol . encode ( :get_peers , node_id : &quot;aa&quot; , info_hash : &quot;bb&quot; , tid : &quot;cc&quot; , scrape : true ) &quot;d1:ad2:id2:aa9:info_hash2:bb6:scrapei1ee1:q9:get_peers1:t2:cc1:y1:qe&quot; announce_peer With the announce_peer message, a peer announces that it is downloading a torrent on a specific port. When the first argument is :announce_peer , the function encodes a announce_peer message. Required arguments are nod_id, info_hash and tid. Optional arguments are port, implied_port and token. Examples iex&gt; KRPCProtocol . encode ( :announce_peer , node_id : &quot;aa&quot; , info_hash : &quot;bb&quot; , tid : &quot;dd&quot; , port : 2342 ) &quot;d1:ad2:id2:aa9:info_hash2:bb4:porti2342ee1:q13:announce_peer1:t2:dd1:y1:qe&quot; iex&gt; KRPCProtocol . encode ( :announce_peer , node_id : &quot;aa&quot; , info_hash : &quot;bb&quot; , tid : &quot;dd&quot; , implied_port : true ) &quot;d1:ad2:id2:aa12:implied_porti1e9:info_hash2:bbe1:q13:announce_peer1:t2:dd1:y1:qe&quot; ping reply The answer to a ping message is a ping reply message. Example iex&gt; KRPCProtocol . encode ( :ping_reply , tid : &quot;aa&quot; , node_id : &quot;bb&quot; ) &quot;d1:rd2:id2:bbe1:t2:aa1:y1:re&quot; find_node reply A find_node reply contains contact information for the requested target. The contact information must be a list which contains node information in the following tuple: {&quot;nodeid&quot;, {97, 98, 99, 100}, 9797} . This works also for IPv6 addresses. Example iex&gt; KRPCProtocol . encode ( :find_node_reply , node_id : &quot;bb&quot; , nodes : [ { &quot;nodeid&quot; , { 97 , 98 , 99 , 100 } , 9797 } ] , tid : &quot;aa&quot; ) &quot;d1:rd2:id2:bb5:nodes12:nodeidabcd&amp;Ee1:t2:aa1:y1:re&quot; get_peers reply A get_peers reply contains contact information for a get_peers request. The contact information must be a list which contains node information in the following tuple: {{97, 98, 99, 100}, 9797} . This works also for IPv6 addresses. Example iex&gt; KRPCProtocol . encode ( :get_peers_reply , node_id : &quot;bb&quot; , values : [ { { 97 , 98 , 99 , 100 } , 9797 } ] , tid : &quot;aa&quot; , token : &quot;b&quot; ) &quot;d1:rd2:id2:bb5:token1:b6:values6:abcd&amp;Ee1:t2:aa1:y1:re&quot;","ref":"KRPCProtocol.Encoder.html#encode/2","title":"KRPCProtocol.Encoder.encode/2","type":"function"},{"doc":"This function generates a 16 bit (2 byte) random transaction ID and converts it to a binary and returns it. This transaction ID is echoed in the response.","ref":"KRPCProtocol.Encoder.html#gen_tid/0","title":"KRPCProtocol.Encoder.gen_tid/0","type":"function"},{"doc":"","ref":"KRPCProtocol.Encoder.html#node_to_binary/2","title":"KRPCProtocol.Encoder.node_to_binary/2","type":"function"},{"doc":"A node_id is a bitstring with a size of 160 bit which uniquely identifies every node.","ref":"KRPCProtocol.Encoder.html#t:node_id/0","title":"KRPCProtocol.Encoder.node_id/0","type":"type"},{"doc":"A transaction ID (t_id) is a bitstring with a size of 16 bit which correlates multiple queries to the same node.","ref":"KRPCProtocol.Encoder.html#t:t_id/0","title":"KRPCProtocol.Encoder.t_id/0","type":"type"},{"doc":"A target also belongs to the same node_id space and is a bitstring with a size of 160 bit.","ref":"KRPCProtocol.Encoder.html#t:target/0","title":"KRPCProtocol.Encoder.target/0","type":"type"}]